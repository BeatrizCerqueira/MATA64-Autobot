FUNCTION_BLOCK escape

// Variáveis de entrada
VAR_INPUT
	distance : REAL;
	enemy_energy : REAL;
	autobot_energy : REAL;
END_VAR

VAR_OUTPUT				// Variável de saída
	life_risk : REAL;		// 0 à 3
END_VAR

// Fuzzify input variable 'distance': {'close', 'medium' , 'far'}
FUZZIFY distance
	TERM close := (0, 1) (50,1) (250, 0) ;
    TERM medium := (100, 0) (250,1) (350,1) (500,0);
    TERM far := (350, 0) (500, 1) (700, 1) (850, 0);
    TERM very_far := (700, 0) (900, 1) (1000, 1);
END_FUZZIFY

// Fuzzify input variable 'enemy_energy': { 'sick', 'healthy' }
FUZZIFY enemy_energy
	TERM sick := (0,1) (30,0);
    TERM healthy := (40, 0) (100, 1);
END_FUZZIFY

// Fuzzify input variable 'autobot_energy': { 'sick', 'healthy' }
FUZZIFY autobot_energy
	TERM sick := (0,1) (40,0);
    TERM healthy := (50, 0) (100, 1);
END_FUZZIFY

// Defuzzify output variable 'life_risk' : {'low', 'medium', 'high' }
DEFUZZIFY life_risk
    TERM low := gauss 0.5 0.2;
    TERM medium := gauss 1 0.2;
    TERM high := gauss 1.5 0.2;
	METHOD : COG; 		// Método 'Centro da gravidade'
	DEFAULT := 0;		// Valor default 0 (se nenhuma das regras ativar o defuzzifier)
END_DEFUZZIFY

// METHODs (COG|COGS|COGF|COA|LM|RM|MM)

	//TERM low := (0,1) (0.25,1) (0.4,0);
	//TERM medium := (0.3,0) (0.5,1) (0.7,0);
	//TERM high := (0.8,0) (1,1);

RULEBLOCK No1
	AND : MIN;			// Operator AND calculation
	ACT : MIN;			// Activation method
	ACCU : MAX;			// Accumulation method

	RULE 1 : IF (autobot_energy IS sick AND distance IS NOT close) THEN life_risk IS low;
	RULE 2 : IF (autobot_energy IS sick AND enemy_energy IS sick) THEN life_risk IS medium;
	RULE 3 : IF (autobot_energy IS sick AND (enemy_energy IS healthy OR distance IS close)) THEN life_risk IS high;
END_RULEBLOCK

END_FUNCTION_BLOCK